{"version":3,"sources":["board-styles.jsx","isOutOfBounds.js","getNeighbours.js","indicesAreOutOfBounds.js","countAliveNeighbours.js","App.js","nextCellState.js","isOverPopulated.js","isUnderPopulated.js","isRessurectable.js","serviceWorker.js","index.js"],"names":["BoardStyle","styled","div","props","columns","CellStyle","value","isOutOfBounds","index","array","length","getNeighbours","cellRow","cellColumn","board","filter","columnIndex","x","y","map","console","log","App","handleCellClick","bind","handleNext","clearBoard","createMatrix","state","matrix","size","i","arr","j","push","this","Math","floor","newBoard","setState","cellState","neighbourCount","nextBoard","allAliveNeighbours","isOverPopulated","isUnderPopulated","isRessurectable","className","reduce","acc","item","concat","onClick","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"opBAEO,IAAMA,EAAaC,IAAOC,IAAV,KAEI,SAAAC,GAAK,OAAIA,EAAMC,WAK7BC,EAAYJ,IAAOC,IAAV,KACA,SAAAC,GAAK,OAAKA,EAAMG,MAAQ,QAAU,U,WCVjD,SAASC,EAAcC,EAAOC,GAEnC,OAAID,GADWC,EAAMC,QACEF,EAAQ,ECA1B,SAASG,EAAcC,EAASC,EAAYC,GAYjD,MAX8B,CAC5B,CAACF,EAAU,EAAGC,EAAa,GAC3B,CAACD,EAAU,EAAGC,GACd,CAACD,EAAU,EAAGC,EAAa,GAC3B,CAACD,EAASC,EAAa,GACvB,CAACD,EAASC,EAAa,GACvB,CAACD,EAAU,EAAGC,EAAa,GAC3B,CAACD,EAAU,EAAGC,GACd,CAACD,EAAU,EAAGC,EAAa,IAI1BE,QAAO,gBCboCC,EAAaP,EDajD,mBAAEQ,EAAF,KAAKC,EAAL,YCboCF,EDaEE,ICZzCX,EDYsCU,ECbcR,EDaRK,ICZVP,EAAcS,EAAaP,ODajEU,KAAI,mCAAEF,EAAF,KAAKC,EAAL,YAAYJ,EAAMG,GAAGC,MEf9BE,QAAQC,IAAIV,G,ICyGGW,E,YAnGb,aAAe,IAAD,8BACZ,+CAEKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBACpB,EAAKI,MAAQ,CACXC,OAAQ,EAAKF,aAAa,IAC1BG,KAAM,IATI,E,0EAaDA,GAEX,IADA,IAAMD,EAAS,GACNE,EAAI,EAAGA,EAAID,EAAMC,IAAK,CAE7B,IADA,IAAMC,EAAM,GACHC,EAAI,EAAGA,EAAIH,EAAMG,IACxBD,EAAIE,MAAK,GAEXL,EAAOK,KAAKF,GAEd,OAAOH,I,sCAGOrB,GAKd,IALsB,IAAD,EACI2B,KAAKP,MAAtBE,EADa,EACbA,KAAMD,EADO,EACPA,OACRZ,EAAImB,KAAKC,MAAM7B,EAAQsB,GACvBZ,EAAIV,EAAQsB,EACZQ,EAAWH,KAAKR,aAAaG,GAC1BC,EAAI,EAAGA,EAAIF,EAAOnB,OAAQqB,IACjC,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAOE,GAAGrB,OAAQuB,IAElCK,EAASP,GAAGE,GADVF,IAAMd,GAAKgB,IAAMf,GACDW,EAAOE,GAAGE,GAEXJ,EAAOE,GAAGE,GAIjCE,KAAKI,SAAS,CACZV,OAAQS,M,mCAQV,IAJY,IC/CcE,EAAWC,EDgD7BZ,EAAWM,KAAKP,MAAhBC,OAEFa,EAAYP,KAAKR,aAAaE,EAAOnB,QAClCqB,EAAI,EAAGA,EAAIF,EAAOnB,OAAQqB,IAAK,CACtC,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAOE,GAAGrB,OAAQuB,IAAK,CACzC,IAAMU,EDtDUhC,ECsDgCoB,EAAGE,EAAGJ,GDrDvCd,QAAO,SAAAT,GAAK,OAAc,IAAVA,KAAgBI,OCsD/CgC,EAAUX,GAAGE,ICtDSO,EDsDUX,EAAOE,GAAGE,GCtDTQ,EDsDaE,ECrDhDH,ICLC,SAAyBC,GAC9B,OAAIA,EAAiB,EDMjBG,CAAgBH,IEPf,SAA0BA,GAC/B,OAAIA,EAAiB,EFMkBI,CAAiBJ,IGPnD,SAAyBA,GAC9B,OAAuB,IAAnBA,EHSGK,CAAgBL,IDmDnBN,KAAKI,SAAS,CACZV,OAAQa,O,mCAKA,IACJb,EAAWM,KAAKP,MAAhBC,OACFa,EAAYP,KAAKR,aAAaE,EAAOnB,QAC3CyB,KAAKI,SAAS,CACZV,OAAQa,M,+BAKV,IAFQ,IAAD,OACHtC,EAAU,GACL2B,EAAI,EAAGA,EAAII,KAAKP,MAAME,KAAMC,IACnC3B,GAAW,QAGb,OACE,yBAAK2C,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC/C,EAAD,CAAYI,QAASA,GAClB+B,KAAKP,MAAMC,OACTmB,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAIE,OAAOD,KAAO,IACxC/B,KAAI,SAAC+B,EAAM1C,GAAP,OACH,kBAACH,EAAD,CACE+C,QAAS,kBAAM,EAAK7B,gBAAgBf,IACpC6C,IAAK7C,EACLF,MAAO4C,GAEN,SAIT,6BACE,4BAAQE,QAASjB,KAAKV,YAAtB,QACA,4BAAQ2B,QAASjB,KAAKT,YAAtB,gB,GA5FM4B,IAAMC,WKMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9063a9df.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const BoardStyle = styled.div`\n  display: grid;\n  grid-template-columns: ${props => props.columns};\n  background-color: black;\n  padding: 10px;\n`;\n\nexport const CellStyle = styled.div`\n  background-color: ${props => (props.value ? \"green\" : \"pink\")};\n  border: 1px solid rgba(0, 0, 0, 0.8);\n  padding: 8px;\n  font-size: 8px;\n  text-align: center;\n`;\n","export function isOutOfBounds(index, array) {\n  const length = array.length;\n  if (index >= length || index < 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n","import { indicesAreOutOfBounds } from \"./indicesAreOutOfBounds\";\n\nexport function getNeighbours(cellRow, cellColumn, board) {\n  const allNeighbourPositions = [\n    [cellRow - 1, cellColumn - 1],\n    [cellRow - 1, cellColumn],\n    [cellRow - 1, cellColumn + 1],\n    [cellRow, cellColumn - 1],\n    [cellRow, cellColumn + 1],\n    [cellRow + 1, cellColumn - 1],\n    [cellRow + 1, cellColumn],\n    [cellRow + 1, cellColumn + 1]\n  ];\n\n  return allNeighbourPositions\n    .filter(([x, y]) => !indicesAreOutOfBounds(x, y, board))\n    .map(([x, y]) => board[x][y]);\n}\n","import { isOutOfBounds } from \"./isOutOfBounds\";\n\nexport function indicesAreOutOfBounds(rowIndex, columnIndex, array) {\n  return isOutOfBounds(rowIndex, array) || isOutOfBounds(columnIndex, array);\n}\n","import { getNeighbours } from \"./getNeighbours\";\nconsole.log(getNeighbours);\nexport function countAliveNeighbours(cellRow, cellColumn, board) {\n  const allNeighbours = getNeighbours(cellRow, cellColumn, board);\n  return allNeighbours.filter(value => value === true).length;\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { BoardStyle, CellStyle } from \"./board-styles\";\nimport { nextCellState } from \"./nextCellState\";\nimport { countAliveNeighbours } from \"./countAliveNeighbours\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.handleCellClick = this.handleCellClick.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n    this.clearBoard = this.clearBoard.bind(this);\n    this.createMatrix = this.createMatrix.bind(this);\n    this.state = {\n      matrix: this.createMatrix(40),\n      size: 40\n    };\n  }\n\n  createMatrix(size) {\n    const matrix = [];\n    for (let i = 0; i < size; i++) {\n      const arr = [];\n      for (let j = 0; j < size; j++) {\n        arr.push(false);\n      }\n      matrix.push(arr);\n    }\n    return matrix;\n  }\n\n  handleCellClick(index) {\n    const { size, matrix } = this.state;\n    const x = Math.floor(index / size);\n    const y = index % size;\n    const newBoard = this.createMatrix(size);\n    for (let i = 0; i < matrix.length; i++) {\n      for (let j = 0; j < matrix[i].length; j++) {\n        if (i === x && j === y) {\n          newBoard[i][j] = !matrix[i][j];\n        } else {\n          newBoard[i][j] = matrix[i][j];\n        }\n      }\n    }\n    this.setState({\n      matrix: newBoard\n    });\n  }\n\n  handleNext() {\n    const { matrix } = this.state;\n\n    const nextBoard = this.createMatrix(matrix.length);\n    for (let i = 0; i < matrix.length; i++) {\n      for (let j = 0; j < matrix[i].length; j++) {\n        const allAliveNeighbours = countAliveNeighbours(i, j, matrix);\n        nextBoard[i][j] = nextCellState(matrix[i][j], allAliveNeighbours);\n      }\n\n      this.setState({\n        matrix: nextBoard\n      });\n    }\n  }\n\n  clearBoard() {\n    const { matrix } = this.state;\n    const nextBoard = this.createMatrix(matrix.length);\n    this.setState({\n      matrix: nextBoard\n    });\n  }\n  render() {\n    let columns = \"\";\n    for (let i = 0; i < this.state.size; i++) {\n      columns += \"auto \";\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <BoardStyle columns={columns}>\n            {this.state.matrix\n              .reduce((acc, item) => acc.concat(item), [])\n              .map((item, index) => (\n                <CellStyle\n                  onClick={() => this.handleCellClick(index)}\n                  key={index}\n                  value={item}\n                >\n                  {\" \"}\n                </CellStyle>\n              ))}\n          </BoardStyle>\n          <div>\n            <button onClick={this.handleNext}>Next</button>\n            <button onClick={this.clearBoard}>Clear</button>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { isOverPopulated } from \"./isOverPopulated\";\nimport { isUnderPopulated } from \"./isUnderPopulated\";\nimport { isRessurectable } from \"./isRessurectable\";\n\nexport function nextCellState(cellState, neighbourCount) {\n  if (cellState) {\n    return !(\n      isOverPopulated(neighbourCount) || isUnderPopulated(neighbourCount)\n    );\n  }\n  return isRessurectable(neighbourCount);\n}\n","export function isOverPopulated(neighbourCount) {\n  if (neighbourCount > 3) return true;\n  return false;\n}\n","export function isUnderPopulated(neighbourCount) {\n  if (neighbourCount < 2) return true;\n  return false;\n}\n","export function isRessurectable(neighbourCount) {\n  if (neighbourCount === 3) return true;\n  return false;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}