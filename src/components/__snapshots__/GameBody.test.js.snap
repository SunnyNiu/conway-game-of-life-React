// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GameBody component tests it render GameBody 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(GameBody)>
    <GameBody
      dispatch={[Function]}
      isRunning={false}
      matrix={
        Array [
          Array [
            false,
            false,
            false,
          ],
          Array [
            false,
            false,
            false,
          ],
          Array [
            false,
            false,
            false,
          ],
        ]
      }
      selected=""
      size={3}
      speed={1}
    >
      <styled.div
        columns="2vw 2vw 2vw "
        gap="0"
        minRowHeight="2vw"
      >
        <StyledComponent
          columns="2vw 2vw 2vw "
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-iwsKbI",
                "isStatic": false,
                "lastClassName": "eAJvuI",
                "rules": Array [
                  "
  display: grid;
  height: ",
                  [Function],
                  ";
  grid-auto-flow: ",
                  [Function],
                  ";
  grid-auto-rows: ",
                  [Function],
                  ";
  ",
                  [Function],
                  ";
  grid-template-columns: ",
                  [Function],
                  ";
  grid-gap: ",
                  [Function],
                  ";
  ",
                  [Function],
                  ";
  ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "propTypes": Object {
                "columnGap": [Function],
                "columns": [Function],
                "flow": [Function],
                "gap": [Function],
                "height": [Function],
                "minRowHeight": [Function],
                "rowGap": [Function],
                "rows": [Function],
              },
              "render": [Function],
              "styledComponentId": "sc-iwsKbI",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          gap="0"
          minRowHeight="2vw"
        >
          <div
            className="sc-iwsKbI esoFeR"
          >
            <styled.div
              key="0"
              onClick={[Function]}
              value={false}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bdVaJa",
                      "isStatic": false,
                      "lastClassName": "hckmgr",
                      "rules": Array [
                        "
  background-color: ",
                        [Function],
                        ";
  border: 1px solid rgba(0, 0, 0, 0.8);
  text-align: center;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bdVaJa",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[Function]}
                value={false}
              >
                <div
                  className="sc-bdVaJa hckmgr"
                  onClick={[Function]}
                  value={false}
                />
              </StyledComponent>
            </styled.div>
            <styled.div
              key="1"
              onClick={[Function]}
              value={false}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bdVaJa",
                      "isStatic": false,
                      "lastClassName": "hckmgr",
                      "rules": Array [
                        "
  background-color: ",
                        [Function],
                        ";
  border: 1px solid rgba(0, 0, 0, 0.8);
  text-align: center;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bdVaJa",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[Function]}
                value={false}
              >
                <div
                  className="sc-bdVaJa hckmgr"
                  onClick={[Function]}
                  value={false}
                />
              </StyledComponent>
            </styled.div>
            <styled.div
              key="2"
              onClick={[Function]}
              value={false}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bdVaJa",
                      "isStatic": false,
                      "lastClassName": "hckmgr",
                      "rules": Array [
                        "
  background-color: ",
                        [Function],
                        ";
  border: 1px solid rgba(0, 0, 0, 0.8);
  text-align: center;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bdVaJa",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[Function]}
                value={false}
              >
                <div
                  className="sc-bdVaJa hckmgr"
                  onClick={[Function]}
                  value={false}
                />
              </StyledComponent>
            </styled.div>
            <styled.div
              key="3"
              onClick={[Function]}
              value={false}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bdVaJa",
                      "isStatic": false,
                      "lastClassName": "hckmgr",
                      "rules": Array [
                        "
  background-color: ",
                        [Function],
                        ";
  border: 1px solid rgba(0, 0, 0, 0.8);
  text-align: center;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bdVaJa",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[Function]}
                value={false}
              >
                <div
                  className="sc-bdVaJa hckmgr"
                  onClick={[Function]}
                  value={false}
                />
              </StyledComponent>
            </styled.div>
            <styled.div
              key="4"
              onClick={[Function]}
              value={false}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bdVaJa",
                      "isStatic": false,
                      "lastClassName": "hckmgr",
                      "rules": Array [
                        "
  background-color: ",
                        [Function],
                        ";
  border: 1px solid rgba(0, 0, 0, 0.8);
  text-align: center;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bdVaJa",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[Function]}
                value={false}
              >
                <div
                  className="sc-bdVaJa hckmgr"
                  onClick={[Function]}
                  value={false}
                />
              </StyledComponent>
            </styled.div>
            <styled.div
              key="5"
              onClick={[Function]}
              value={false}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bdVaJa",
                      "isStatic": false,
                      "lastClassName": "hckmgr",
                      "rules": Array [
                        "
  background-color: ",
                        [Function],
                        ";
  border: 1px solid rgba(0, 0, 0, 0.8);
  text-align: center;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bdVaJa",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[Function]}
                value={false}
              >
                <div
                  className="sc-bdVaJa hckmgr"
                  onClick={[Function]}
                  value={false}
                />
              </StyledComponent>
            </styled.div>
            <styled.div
              key="6"
              onClick={[Function]}
              value={false}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bdVaJa",
                      "isStatic": false,
                      "lastClassName": "hckmgr",
                      "rules": Array [
                        "
  background-color: ",
                        [Function],
                        ";
  border: 1px solid rgba(0, 0, 0, 0.8);
  text-align: center;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bdVaJa",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[Function]}
                value={false}
              >
                <div
                  className="sc-bdVaJa hckmgr"
                  onClick={[Function]}
                  value={false}
                />
              </StyledComponent>
            </styled.div>
            <styled.div
              key="7"
              onClick={[Function]}
              value={false}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bdVaJa",
                      "isStatic": false,
                      "lastClassName": "hckmgr",
                      "rules": Array [
                        "
  background-color: ",
                        [Function],
                        ";
  border: 1px solid rgba(0, 0, 0, 0.8);
  text-align: center;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bdVaJa",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[Function]}
                value={false}
              >
                <div
                  className="sc-bdVaJa hckmgr"
                  onClick={[Function]}
                  value={false}
                />
              </StyledComponent>
            </styled.div>
            <styled.div
              key="8"
              onClick={[Function]}
              value={false}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bdVaJa",
                      "isStatic": false,
                      "lastClassName": "hckmgr",
                      "rules": Array [
                        "
  background-color: ",
                        [Function],
                        ";
  border: 1px solid rgba(0, 0, 0, 0.8);
  text-align: center;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bdVaJa",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[Function]}
                value={false}
              >
                <div
                  className="sc-bdVaJa hckmgr"
                  onClick={[Function]}
                  value={false}
                />
              </StyledComponent>
            </styled.div>
          </div>
        </StyledComponent>
      </styled.div>
      <styled.div>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-iwsKbI",
                "isStatic": false,
                "lastClassName": "eAJvuI",
                "rules": Array [
                  "
  display: grid;
  height: ",
                  [Function],
                  ";
  grid-auto-flow: ",
                  [Function],
                  ";
  grid-auto-rows: ",
                  [Function],
                  ";
  ",
                  [Function],
                  ";
  grid-template-columns: ",
                  [Function],
                  ";
  grid-gap: ",
                  [Function],
                  ";
  ",
                  [Function],
                  ";
  ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "propTypes": Object {
                "columnGap": [Function],
                "columns": [Function],
                "flow": [Function],
                "gap": [Function],
                "height": [Function],
                "minRowHeight": [Function],
                "rowGap": [Function],
                "rows": [Function],
              },
              "render": [Function],
              "styledComponentId": "sc-iwsKbI",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="sc-iwsKbI eAJvuI"
          >
            <styled.div
              minWidth="60px"
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dnqmqq",
                      "isStatic": false,
                      "lastClassName": "dzVJZf",
                      "rules": Array [
                        "
  height : 100%;
  min-width: ",
                        [Function],
                        ";
  grid-column-end: ",
                        [Function],
                        ";
  grid-row-end: ",
                        [Function],
                        "

  ",
                        [Function],
                        "
  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "propTypes": Object {
                      "center": [Function],
                      "height": [Function],
                      "left": [Function],
                      "top": [Function],
                      "width": [Function],
                    },
                    "render": [Function],
                    "styledComponentId": "sc-dnqmqq",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                minWidth="60px"
              >
                <div
                  className="sc-dnqmqq dnRCHk"
                >
                  <Styled(Dropdown)
                    className=""
                    onChange={[Function]}
                    options={
                      Array [
                        "Glider",
                        "Small-Exploder",
                        "Exploder",
                        "10-Cell-Row",
                        "LightweightSpaceship",
                        "Tumbler",
                      ]
                    }
                    value=""
                  >
                    <StyledComponent
                      className=""
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gzVnrw",
                            "isStatic": false,
                            "lastClassName": "kvDbHg",
                            "rules": Array [
                              "
    position: relative;
    background-color: white;
    border: 1px solid #ccc;
    border-radius: 2px;
    box-sizing: border-box;
    color: palevioletred;
    cursor: default;
    outline: none;
    transition: all 200ms ease;
    text-align: left;
    display: block;
    margin: 0.5em;
",
                            ],
                          },
                          "displayName": "Styled(Dropdown)",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-gzVnrw",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onChange={[Function]}
                      options={
                        Array [
                          "Glider",
                          "Small-Exploder",
                          "Exploder",
                          "10-Cell-Row",
                          "LightweightSpaceship",
                          "Tumbler",
                        ]
                      }
                      value=""
                    >
                      <Dropdown
                        baseClassName="Dropdown"
                        className="sc-gzVnrw kvDbHg"
                        onChange={[Function]}
                        options={
                          Array [
                            "Glider",
                            "Small-Exploder",
                            "Exploder",
                            "10-Cell-Row",
                            "LightweightSpaceship",
                            "Tumbler",
                          ]
                        }
                        value=""
                      >
                        <div
                          className="Dropdown-root sc-gzVnrw kvDbHg"
                        >
                          <div
                            aria-haspopup="listbox"
                            className="Dropdown-control"
                            onMouseDown={[Function]}
                            onTouchEnd={[Function]}
                          >
                            <div
                              className="Dropdown-placeholder"
                            >
                              Select...
                            </div>
                            <div
                              className="Dropdown-arrow-wrapper"
                            >
                              <span
                                className="Dropdown-arrow"
                              />
                            </div>
                          </div>
                        </div>
                      </Dropdown>
                    </StyledComponent>
                  </Styled(Dropdown)>
                </div>
              </StyledComponent>
            </styled.div>
            <styled.div
              minWidth="40px"
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dnqmqq",
                      "isStatic": false,
                      "lastClassName": "dzVJZf",
                      "rules": Array [
                        "
  height : 100%;
  min-width: ",
                        [Function],
                        ";
  grid-column-end: ",
                        [Function],
                        ";
  grid-row-end: ",
                        [Function],
                        "

  ",
                        [Function],
                        "
  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "propTypes": Object {
                      "center": [Function],
                      "height": [Function],
                      "left": [Function],
                      "top": [Function],
                      "width": [Function],
                    },
                    "render": [Function],
                    "styledComponentId": "sc-dnqmqq",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                minWidth="40px"
              >
                <div
                  className="sc-dnqmqq cixopw"
                >
                  <styled.button
                    onClick={[Function]}
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "lastClassName": "iHCXyf",
                            "rules": Array [
                              "
  display: inline;
  color: palevioletred;
  font-size: 0.5em;
  border-radius: 3px;
",
                            ],
                          },
                          "displayName": "styled.button",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                    >
                      <button
                        className="sc-EHOje iHCXyf"
                        onClick={[Function]}
                      >
                        Next
                      </button>
                    </StyledComponent>
                  </styled.button>
                </div>
              </StyledComponent>
            </styled.div>
            <styled.div
              minWidth="40px"
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dnqmqq",
                      "isStatic": false,
                      "lastClassName": "dzVJZf",
                      "rules": Array [
                        "
  height : 100%;
  min-width: ",
                        [Function],
                        ";
  grid-column-end: ",
                        [Function],
                        ";
  grid-row-end: ",
                        [Function],
                        "

  ",
                        [Function],
                        "
  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "propTypes": Object {
                      "center": [Function],
                      "height": [Function],
                      "left": [Function],
                      "top": [Function],
                      "width": [Function],
                    },
                    "render": [Function],
                    "styledComponentId": "sc-dnqmqq",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                minWidth="40px"
              >
                <div
                  className="sc-dnqmqq cixopw"
                >
                  <styled.button
                    onClick={[Function]}
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "lastClassName": "iHCXyf",
                            "rules": Array [
                              "
  display: inline;
  color: palevioletred;
  font-size: 0.5em;
  border-radius: 3px;
",
                            ],
                          },
                          "displayName": "styled.button",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                    >
                      <button
                        className="sc-EHOje iHCXyf"
                        onClick={[Function]}
                      >
                        Start
                      </button>
                    </StyledComponent>
                  </styled.button>
                </div>
              </StyledComponent>
            </styled.div>
            <styled.div
              minWidth="40px"
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dnqmqq",
                      "isStatic": false,
                      "lastClassName": "dzVJZf",
                      "rules": Array [
                        "
  height : 100%;
  min-width: ",
                        [Function],
                        ";
  grid-column-end: ",
                        [Function],
                        ";
  grid-row-end: ",
                        [Function],
                        "

  ",
                        [Function],
                        "
  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "propTypes": Object {
                      "center": [Function],
                      "height": [Function],
                      "left": [Function],
                      "top": [Function],
                      "width": [Function],
                    },
                    "render": [Function],
                    "styledComponentId": "sc-dnqmqq",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                minWidth="40px"
              >
                <div
                  className="sc-dnqmqq cixopw"
                >
                  <styled.button
                    onClick={[Function]}
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "lastClassName": "iHCXyf",
                            "rules": Array [
                              "
  display: inline;
  color: palevioletred;
  font-size: 0.5em;
  border-radius: 3px;
",
                            ],
                          },
                          "displayName": "styled.button",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                    >
                      <button
                        className="sc-EHOje iHCXyf"
                        onClick={[Function]}
                      >
                        Clear
                      </button>
                    </StyledComponent>
                  </styled.button>
                </div>
              </StyledComponent>
            </styled.div>
            <styled.div
              minWidth="42px"
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dnqmqq",
                      "isStatic": false,
                      "lastClassName": "dzVJZf",
                      "rules": Array [
                        "
  height : 100%;
  min-width: ",
                        [Function],
                        ";
  grid-column-end: ",
                        [Function],
                        ";
  grid-row-end: ",
                        [Function],
                        "

  ",
                        [Function],
                        "
  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "propTypes": Object {
                      "center": [Function],
                      "height": [Function],
                      "left": [Function],
                      "top": [Function],
                      "width": [Function],
                    },
                    "render": [Function],
                    "styledComponentId": "sc-dnqmqq",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                minWidth="42px"
              >
                <div
                  className="sc-dnqmqq eHwRgK"
                >
                  <styled.button>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bZQynM",
                            "isStatic": false,
                            "lastClassName": "beDWRn",
                            "rules": Array [
                              "
  display: inline;
  color: palevioletred;
  font-size: 0.5em;
  border: none;
",
                            ],
                          },
                          "displayName": "styled.button",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bZQynM",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <button
                        className="sc-bZQynM beDWRn"
                      >
                        Speed:
                      </button>
                    </StyledComponent>
                  </styled.button>
                </div>
              </StyledComponent>
            </styled.div>
            <styled.div
              minWidth="70px"
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dnqmqq",
                      "isStatic": false,
                      "lastClassName": "dzVJZf",
                      "rules": Array [
                        "
  height : 100%;
  min-width: ",
                        [Function],
                        ";
  grid-column-end: ",
                        [Function],
                        ";
  grid-row-end: ",
                        [Function],
                        "

  ",
                        [Function],
                        "
  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "propTypes": Object {
                      "center": [Function],
                      "height": [Function],
                      "left": [Function],
                      "top": [Function],
                      "width": [Function],
                    },
                    "render": [Function],
                    "styledComponentId": "sc-dnqmqq",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                minWidth="70px"
              >
                <div
                  className="sc-dnqmqq dzVJZf"
                >
                  <styled.input
                    id="speed"
                    max="10"
                    min="1"
                    onChange={[Function]}
                    step="1"
                    title="speed dial"
                    type="range"
                    value={1}
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-htoDjs",
                            "isStatic": false,
                            "lastClassName": "hsbhgX",
                            "rules": Array [
                              "
  margin-top: 0.5em;
",
                            ],
                          },
                          "displayName": "styled.input",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-htoDjs",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      id="speed"
                      max="10"
                      min="1"
                      onChange={[Function]}
                      step="1"
                      title="speed dial"
                      type="range"
                      value={1}
                    >
                      <input
                        className="sc-htoDjs hsbhgX"
                        id="speed"
                        max="10"
                        min="1"
                        onChange={[Function]}
                        step="1"
                        title="speed dial"
                        type="range"
                        value={1}
                      />
                    </StyledComponent>
                  </styled.input>
                </div>
              </StyledComponent>
            </styled.div>
          </div>
        </StyledComponent>
      </styled.div>
    </GameBody>
  </Connect(GameBody)>
</Provider>
`;
